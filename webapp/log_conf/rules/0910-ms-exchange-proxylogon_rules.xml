<!--
  Copyright (C) 2015, Wazuh Inc.
-->

<!--
  Rules 
    Microsoft exchange ID: 91000 - 91008

  Reference:
    Based on https://www.microsoft.com/security/blog/2021/03/02/hafnium-targeting-exchange-servers/
-->

<group name="ms,exchange,">

  <rule id="91000" level="12">
    <if_group>sysmon_event1</if_group>
    <field name="win.eventdata.parentImage">\\UMWorkerProcess.exe</field>
    <field name="win.eventdata.originalFileName" negate="yes">werfault.exe|wermgr.exe</field>
    <description>UMWorkerProcess.exe spawned unexpected processes. Possible malicious activity.</description>
    <mitre>
      <id>T1210</id>
    </mitre>
  </rule>

  <rule id="91001" level="12">
    <if_group>sysmon_event_11</if_group>
    <field name="win.eventdata.image">\\UMWorkerProcess.exe</field>
    <field name="win.eventdata.targetFilename" negate="yes">CacheCleanup.bin$|.txt$|.log$|.cfg$|cleanup.bin$</field>
    <description>UMWorkerProcess.exe spawned creating abnormal files. Possible malicious activity.</description>
    <mitre>
      <id>T1210</id>
    </mitre>
  </rule>

  <!--
    CVE-2021-26855 (ProxyLogon) exploitation can be detected via the following Exchange HttpProxy logs:
    These logs are located in the following directory: %PROGRAMFILES%\Microsoft\Exchange Server\V15\Logging\HttpProxy
    Exploitation can be identified by searching for log entries where the AuthenticatedUser is empty and the AnchorMailbox contains the pattern of ServerInfo~*/*
  -->
  <rule id="91002" level="12">
    <decoded_as>HTTPProxyLog</decoded_as>
    <regex type="pcre2">,,[^,]*,ServerInfo~[^,]*/[^,]*</regex>
    <description>MS Exchange - Possible ProxyLogon vulnerability exploitation (CVE-2021-26855).</description>
    <mitre>
      <id>T1210</id>
    </mitre>
  </rule>

  <!--
    CVE-2021-27065  is a post-authentication arbitrary file write vulnerability in Exchange. If HAFNIUM could authenticate
    with the Exchange server then they could use this vulnerability to write a file to any path on the server.
    They could authenticate by exploiting the CVE-2021-26855 SSRF vulnerability or by compromising a legitimate
    adminâ€™s credentials.
  -->
  <rule id="91003" level="12">
    <decoded_as>ECPServerLog</decoded_as>
    <regex type="pcre2">Set-.+VirtualDirectory.+?Url.+\w+.*\>.*?\/\w+\>.+?VirtualDirectory</regex>
    <description>MS Exchange - Possible ProxyLogon vulnerability exploitation (CVE-2021-27065).</description>
    <mitre>
      <id>T1210</id>
    </mitre>
  </rule>

  <!--
    CVE-2021-26857 is an insecure deserialization vulnerability in the Unified Messaging service. Insecure deserialization
    is where untrusted user-controllable data is deserialized by a program. Exploiting this vulnerability gave HAFNIUM the
    ability to run code as SYSTEM on the Exchange server. This requires administrator permission or another vulnerability
    to exploit.
  -->
  <rule id="91004" level="0">
    <if_sid>60602</if_sid>
    <field name="win.system.providerName">^MSExchange Unified Messaging$</field>
    <options>no_full_log</options>
    <description>Filtering MSExchange Unified Message error events.</description>
  </rule>

  <rule id="91005" level="12">
    <if_sid>91004</if_sid>
    <field name="win.system.message">System.InvalidCastException</field>
    <description>MS Exchange - Possible deserialization exploitation (CVE-2021-26857).</description>
    <mitre>
      <id>T1068</id>
    </mitre>
  </rule>

  <rule id="91006" level="12">
    <if_group>sysmon_event1</if_group>
    <field name="win.eventdata.originalFileName">cmd.exe|powershell.exe|powershell_ISE.exe</field>
    <field name="win.eventdata.commandLine">Add-PSSnapin\s+Microsoft.Exchange.Powershell.Snapin</field>
    <description>Powershell initializing MS Exchange snapin. Possible mailbox data dump</description>
    <mitre>
      <id>T1114</id>
      <id>T1059</id>
    </mitre>
  </rule>

  <rule id="91007" level="12">
    <if_group>sysmon_event1</if_group>
    <field name="win.eventdata.originalFileName">powershell.exe|powershell_ISE.exe</field>
    <field name="win.eventdata.commandLine" type="pcre2">\$client = New-Object System\.Net\.Sockets\.TCPClient</field>
    <description>Possible Nishang Invoke-PowerShellTcpOneLine reverse shell script execution</description>
    <mitre>
      <id>T1210</id>
      <id>T1588</id>
      <id>T1059</id>
    </mitre>
  </rule>

</group>
